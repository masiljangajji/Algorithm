name: Daily Algorithm Issue (cross repo)

on:
  push:
    branches:
      - main

jobs:
  daily-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Create or update today's issue in self-study (and close previous)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SELF_STUDY_TOKEN }}
          script: |
            // ===== Config =====
            var sourceOwner = context.repo.owner;   // e.g. 'Masiljangajji'
            var sourceRepo  = context.repo.repo;    // e.g. 'Algorithm'
            var targetOwner = sourceOwner;          // same owner
            var targetRepo  = 'self-study';         // create/update issues here
            var dailyLabel  = 'algorithm-daily';    // label to mark daily issues

            // ===== Helpers =====
            function kstDateString(d) {
              var date = d || new Date();
              function fmt(opt) {
                return new Intl.DateTimeFormat('ko-KR', Object.assign({ timeZone: 'Asia/Seoul' }, opt)).format(date);
              }
              var y = fmt({ year: 'numeric' });
              var m = fmt({ month: '2-digit' });
              var day = fmt({ day: '2-digit' });
              return y + '-' + m + '-' + day;
            }

            var payload = context.payload;
            var repository = payload && payload.repository ? payload.repository : null;
            var commits    = payload && payload.commits ? payload.commits : [];
            var pusher     = payload && payload.pusher ? payload.pusher : null;

            if (!commits || commits.length === 0) {
              core.info('No commits in payload ‚Äî skip.');
              return;
            }

            // Source(Algorithm) repo HTML URL
            var sourceHtml = repository && repository.html_url ? repository.html_url : ('https://github.com/' + sourceOwner + '/' + sourceRepo);

            var todayStr   = kstDateString();
            var issueTitle = 'üß© ÏïåÍ≥†Î¶¨Ï¶ò Î¨∏Ï†ú ÌíÄÏù¥ - ' + todayStr;

            // 1) list open issues on target repo
            var openIssues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner: targetOwner, repo: targetRepo, state: 'open', per_page: 100 }
            );

            // 2) close previous daily issues except today's
            for (var i = 0; i < openIssues.length; i++) {
              var iss = openIssues[i];
              var labels = iss.labels || [];
              var hasDaily = false;
              for (var j = 0; j < labels.length; j++) {
                var l = labels[j];
                var name = (typeof l === 'string') ? l : l.name;
                if (name === dailyLabel) { hasDaily = true; break; }
              }
              if (hasDaily && iss.title !== issueTitle) {
                await github.rest.issues.update({
                  owner: targetOwner,
                  repo: targetRepo,
                  issue_number: iss.number,
                  state: 'closed'
                });
                core.info('Closed previous daily issue #' + iss.number + ': ' + iss.title);
              }
            }

            // 3) find today's open issue
            var todaysIssue = null;
            for (var i2 = 0; i2 < openIssues.length; i2++) {
              if (openIssues[i2].title === issueTitle) { todaysIssue = openIssues[i2]; break; }
            }

            // if not found, try reopen a closed one with same title
            if (!todaysIssue) {
              var closedIssues = await github.paginate(
                github.rest.issues.listForRepo,
                { owner: targetOwner, repo: targetRepo, state: 'closed', per_page: 100 }
              );
              for (var k = 0; k < closedIssues.length; k++) {
                if (closedIssues[k].title === issueTitle) {
                  await github.rest.issues.update({
                    owner: targetOwner,
                    repo: targetRepo,
                    issue_number: closedIssues[k].number,
                    state: 'open'
                  });
                  var reopened = await github.rest.issues.get({
                    owner: targetOwner,
                    repo: targetRepo,
                    issue_number: closedIssues[k].number
                  });
                  todaysIssue = reopened.data;
                  core.info('Re-opened today\'s issue #' + todaysIssue.number);
                  break;
                }
              }
            }

            // 4) if still not found, create today's issue
            if (!todaysIssue) {
              var creator = (pusher && pusher.name) ? pusher.name : 'unknown';
              var bodyLines = [
                '## ' + issueTitle,
                '',
                '- ÏûëÏÑ±Ïûê: **' + creator + '**',
                '- ÏÉùÏÑ± ÏãúÍ∞Å (KST): ' + kstDateString(new Date()),
                '',
                '> ÌïòÎ£® ÎèôÏïàÏùò Î¨∏Ï†ú ÌíÄÏù¥ Ïª§Î∞ãÏù¥ Ïù¥ Ïù¥ÏäàÏóê **ÎåìÍ∏ÄÎ°ú ÎàÑÏ†Å**Îê©ÎãàÎã§.',
                '> ÏÜåÏä§ Î¶¨Ìè¨: `' + sourceOwner + '/' + sourceRepo + '`'
              ];
              var created = await github.rest.issues.create({
                owner: targetOwner,
                repo: targetRepo,
                title: issueTitle,
                body: bodyLines.join('\n'),
                labels: [dailyLabel] // remove if you don't want a label
              });
              todaysIssue = created.data;
              core.info('Created today\'s issue #' + todaysIssue.number + ' in ' + targetOwner + '/' + targetRepo);
            }

            // 5) append this push's commits as one comment
            var nowKST = kstDateString(new Date());
            var lines = [];
            lines.push('### üîó Push (KST: ' + nowKST + ') ‚Äî from `' + sourceOwner + '/' + sourceRepo + '`');
            lines.push('');

            for (var cIdx = 0; cIdx < commits.length; cIdx++) {
              var c = commits[cIdx];
              var shortSha  = c.id ? c.id.substring(0, 8) : '(no sha)';
              var commitUrl = sourceHtml + '/commit/' + c.id;
              var msg = (c.message || '');
              var firstLine = msg.split(/\r?\n/)[0];
              lines.push('- [`' + shortSha + '`](' + commitUrl + ') ' + firstLine);
            }

            lines.push('');
            lines.push('<details><summary>üìù Full Commit Messages</summary>');
            lines.push('');
            for (var cIdx2 = 0; cIdx2 < commits.length; cIdx2++) {
              var c2 = commits[cIdx2];
              var commitUrl2 = sourceHtml + '/commit/' + c2.id;
              lines.push('**Commit:** ' + commitUrl2);
              lines.push('```');
              lines.push(c2.message || '');
              lines.push('```');
            }
            lines.push('</details>');

            await github.rest.issues.createComment({
              owner: targetOwner,
              repo: targetRepo,
              issue_number: todaysIssue.number,
              body: lines.join('\n')
            });

            core.info('Updated issue #' + todaysIssue.number + ' in ' + targetOwner + '/' + targetRepo + ': ' + issueTitle);